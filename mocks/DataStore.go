// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *DataStore) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	ret := _m.Called(ctx, opts)

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sql.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sql.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionLock provides a mock function with given fields:
func (_m *DataStore) ConnectionLock() {
	_m.Called()
}

// ConnectionUnlock provides a mock function with given fields:
func (_m *DataStore) ConnectionUnlock() {
	_m.Called()
}

// FileLock provides a mock function with given fields:
func (_m *DataStore) FileLock() {
	_m.Called()
}

// FileUnlock provides a mock function with given fields:
func (_m *DataStore) FileUnlock() {
	_m.Called()
}

// GetOpenConnection provides a mock function with given fields:
func (_m *DataStore) GetOpenConnection() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// OpenConnectionToExistingDB provides a mock function with given fields:
func (_m *DataStore) OpenConnectionToExistingDB() io.Closer {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	return r0
}

// RunMigration provides a mock function with given fields:
func (_m *DataStore) RunMigration() {
	_m.Called()
}

// Serialize provides a mock function with given fields:
func (_m *DataStore) Serialize() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// UpdateOpenConnection provides a mock function with given fields: conn
func (_m *DataStore) UpdateOpenConnection(conn *sql.DB) {
	_m.Called(conn)
}

type mockConstructorTestingTNewDataStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataStore creates a new instance of DataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataStore(t mockConstructorTestingTNewDataStore) *DataStore {
	mock := &DataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
