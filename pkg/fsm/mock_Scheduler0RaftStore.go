// Code generated by mockery v2.26.1. DO NOT EDIT.

package fsm

import (
	db "scheduler0/pkg/db"

	raft "github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// MockScheduler0RaftStore is an autogenerated mock type for the Scheduler0RaftStore type
type MockScheduler0RaftStore struct {
	mock.Mock
}

// BootstrapRaftClusterWithConfig provides a mock function with given fields: raftServerConfiguration
func (_m *MockScheduler0RaftStore) BootstrapRaftClusterWithConfig(raftServerConfiguration raft.Configuration) {
	_m.Called(raftServerConfiguration)
}

// GetBatchingFSM provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetBatchingFSM() raft.BatchingFSM {
	ret := _m.Called()

	var r0 raft.BatchingFSM
	if rf, ok := ret.Get(0).(func() raft.BatchingFSM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.BatchingFSM)
		}
	}

	return r0
}

// GetDataStore provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetDataStore() db.DataStore {
	ret := _m.Called()

	var r0 db.DataStore
	if rf, ok := ret.Get(0).(func() db.DataStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DataStore)
		}
	}

	return r0
}

// GetFSM provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetFSM() raft.FSM {
	ret := _m.Called()

	var r0 raft.FSM
	if rf, ok := ret.Get(0).(func() raft.FSM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.FSM)
		}
	}

	return r0
}

// GetLeaderChangeChannel provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetLeaderChangeChannel() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// GetRaft provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetRaft() *raft.Raft {
	ret := _m.Called()

	var r0 *raft.Raft
	if rf, ok := ret.Get(0).(func() *raft.Raft); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raft.Raft)
		}
	}

	return r0
}

// GetRaftStats provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetRaftStats() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetServersOnRaftCluster provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) GetServersOnRaftCluster() []raft.Server {
	ret := _m.Called()

	var r0 []raft.Server
	if rf, ok := ret.Get(0).(func() []raft.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]raft.Server)
		}
	}

	return r0
}

// InitRaft provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) InitRaft() {
	_m.Called()
}

// LeaderWithID provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) LeaderWithID() (raft.ServerAddress, raft.ServerID) {
	ret := _m.Called()

	var r0 raft.ServerAddress
	var r1 raft.ServerID
	if rf, ok := ret.Get(0).(func() (raft.ServerAddress, raft.ServerID)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() raft.ServerAddress); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(raft.ServerAddress)
	}

	if rf, ok := ret.Get(1).(func() raft.ServerID); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(raft.ServerID)
	}

	return r0, r1
}

// RecoverRaftState provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) RecoverRaftState() {
	_m.Called()
}

// RegisterObserver provides a mock function with given fields: or
func (_m *MockScheduler0RaftStore) RegisterObserver(or *raft.Observer) {
	_m.Called(or)
}

// UpdateRaft provides a mock function with given fields: rft
func (_m *MockScheduler0RaftStore) UpdateRaft(rft *raft.Raft) {
	_m.Called(rft)
}

// VerifyLeader provides a mock function with given fields:
func (_m *MockScheduler0RaftStore) VerifyLeader() raft.Future {
	ret := _m.Called()

	var r0 raft.Future
	if rf, ok := ret.Get(0).(func() raft.Future); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.Future)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockScheduler0RaftStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockScheduler0RaftStore creates a new instance of MockScheduler0RaftStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockScheduler0RaftStore(t mockConstructorTestingTNewMockScheduler0RaftStore) *MockScheduler0RaftStore {
	mock := &MockScheduler0RaftStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
