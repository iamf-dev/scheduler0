// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "scheduler0/models"

	mock "github.com/stretchr/testify/mock"

	utils "scheduler0/utils"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

// BatchGetProjects provides a mock function with given fields: projectIds
func (_m *ProjectService) BatchGetProjects(projectIds []uint64) ([]models.Project, *utils.GenericError) {
	ret := _m.Called(projectIds)

	var r0 []models.Project
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func([]uint64) ([]models.Project, *utils.GenericError)); ok {
		return rf(projectIds)
	}
	if rf, ok := ret.Get(0).(func([]uint64) []models.Project); ok {
		r0 = rf(projectIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint64) *utils.GenericError); ok {
		r1 = rf(projectIds)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// CreateOne provides a mock function with given fields: project
func (_m *ProjectService) CreateOne(project models.Project) (*models.Project, *utils.GenericError) {
	ret := _m.Called(project)

	var r0 *models.Project
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(models.Project) (*models.Project, *utils.GenericError)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(models.Project) *models.Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Project) *utils.GenericError); ok {
		r1 = rf(project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// DeleteOneByID provides a mock function with given fields: project
func (_m *ProjectService) DeleteOneByID(project models.Project) *utils.GenericError {
	ret := _m.Called(project)

	var r0 *utils.GenericError
	if rf, ok := ret.Get(0).(func(models.Project) *utils.GenericError); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GenericError)
		}
	}

	return r0
}

// GetOneByID provides a mock function with given fields: project
func (_m *ProjectService) GetOneByID(project *models.Project) *utils.GenericError {
	ret := _m.Called(project)

	var r0 *utils.GenericError
	if rf, ok := ret.Get(0).(func(*models.Project) *utils.GenericError); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GenericError)
		}
	}

	return r0
}

// GetOneByName provides a mock function with given fields: project
func (_m *ProjectService) GetOneByName(project *models.Project) *utils.GenericError {
	ret := _m.Called(project)

	var r0 *utils.GenericError
	if rf, ok := ret.Get(0).(func(*models.Project) *utils.GenericError); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GenericError)
		}
	}

	return r0
}

// List provides a mock function with given fields: offset, limit
func (_m *ProjectService) List(offset uint64, limit uint64) (*models.PaginatedProject, *utils.GenericError) {
	ret := _m.Called(offset, limit)

	var r0 *models.PaginatedProject
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(uint64, uint64) (*models.PaginatedProject, *utils.GenericError)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) *models.PaginatedProject); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaginatedProject)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) *utils.GenericError); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// UpdateOneByID provides a mock function with given fields: project
func (_m *ProjectService) UpdateOneByID(project *models.Project) *utils.GenericError {
	ret := _m.Called(project)

	var r0 *utils.GenericError
	if rf, ok := ret.Get(0).(func(*models.Project) *utils.GenericError); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GenericError)
		}
	}

	return r0
}

type mockConstructorTestingTNewProjectService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectService(t mockConstructorTestingTNewProjectService) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
