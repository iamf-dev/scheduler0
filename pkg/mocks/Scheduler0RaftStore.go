// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	db "scheduler0/db"

	mock "github.com/stretchr/testify/mock"

	raft "github.com/hashicorp/raft"
)

// Scheduler0RaftStore is an autogenerated mock type for the Scheduler0RaftStore type
type Scheduler0RaftStore struct {
	mock.Mock
}

// GetBatchingFSM provides a mock function with given fields:
func (_m *Scheduler0RaftStore) GetBatchingFSM() raft.BatchingFSM {
	ret := _m.Called()

	var r0 raft.BatchingFSM
	if rf, ok := ret.Get(0).(func() raft.BatchingFSM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.BatchingFSM)
		}
	}

	return r0
}

// GetDataStore provides a mock function with given fields:
func (_m *Scheduler0RaftStore) GetDataStore() db.DataStore {
	ret := _m.Called()

	var r0 db.DataStore
	if rf, ok := ret.Get(0).(func() db.DataStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DataStore)
		}
	}

	return r0
}

// GetFSM provides a mock function with given fields:
func (_m *Scheduler0RaftStore) GetFSM() raft.FSM {
	ret := _m.Called()

	var r0 raft.FSM
	if rf, ok := ret.Get(0).(func() raft.FSM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.FSM)
		}
	}

	return r0
}

// GetRaft provides a mock function with given fields:
func (_m *Scheduler0RaftStore) GetRaft() *raft.Raft {
	ret := _m.Called()

	var r0 *raft.Raft
	if rf, ok := ret.Get(0).(func() *raft.Raft); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raft.Raft)
		}
	}

	return r0
}

// UpdateRaft provides a mock function with given fields: rft
func (_m *Scheduler0RaftStore) UpdateRaft(rft *raft.Raft) {
	_m.Called(rft)
}

type mockConstructorTestingTNewScheduler0RaftStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewScheduler0RaftStore creates a new instance of Scheduler0RaftStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScheduler0RaftStore(t mockConstructorTestingTNewScheduler0RaftStore) *Scheduler0RaftStore {
	mock := &Scheduler0RaftStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
