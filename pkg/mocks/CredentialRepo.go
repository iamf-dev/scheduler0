// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "scheduler0/pkg/models"

	mock "github.com/stretchr/testify/mock"

	utils "scheduler0/pkg/utils"
)

// CredentialRepo is an autogenerated mock type for the CredentialRepo type
type CredentialRepo struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *CredentialRepo) Count() (uint64, *utils.GenericError) {
	ret := _m.Called()

	var r0 uint64
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func() (uint64, *utils.GenericError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() *utils.GenericError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// CreateOne provides a mock function with given fields: credential
func (_m *CredentialRepo) CreateOne(credential models.Credential) (uint64, *utils.GenericError) {
	ret := _m.Called(credential)

	var r0 uint64
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(models.Credential) (uint64, *utils.GenericError)); ok {
		return rf(credential)
	}
	if rf, ok := ret.Get(0).(func(models.Credential) uint64); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(models.Credential) *utils.GenericError); ok {
		r1 = rf(credential)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// DeleteOneByID provides a mock function with given fields: credential
func (_m *CredentialRepo) DeleteOneByID(credential models.Credential) (uint64, *utils.GenericError) {
	ret := _m.Called(credential)

	var r0 uint64
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(models.Credential) (uint64, *utils.GenericError)); ok {
		return rf(credential)
	}
	if rf, ok := ret.Get(0).(func(models.Credential) uint64); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(models.Credential) *utils.GenericError); ok {
		r1 = rf(credential)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// GetByAPIKey provides a mock function with given fields: credential
func (_m *CredentialRepo) GetByAPIKey(credential *models.Credential) *utils.GenericError {
	ret := _m.Called(credential)

	var r0 *utils.GenericError
	if rf, ok := ret.Get(0).(func(*models.Credential) *utils.GenericError); ok {
		r0 = rf(credential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GenericError)
		}
	}

	return r0
}

// GetOneID provides a mock function with given fields: credential
func (_m *CredentialRepo) GetOneID(credential *models.Credential) error {
	ret := _m.Called(credential)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Credential) error); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: offset, limit, orderBy
func (_m *CredentialRepo) List(offset uint64, limit uint64, orderBy string) ([]models.Credential, *utils.GenericError) {
	ret := _m.Called(offset, limit, orderBy)

	var r0 []models.Credential
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(uint64, uint64, string) ([]models.Credential, *utils.GenericError)); ok {
		return rf(offset, limit, orderBy)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, string) []models.Credential); ok {
		r0 = rf(offset, limit, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, string) *utils.GenericError); ok {
		r1 = rf(offset, limit, orderBy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

// UpdateOneByID provides a mock function with given fields: credential
func (_m *CredentialRepo) UpdateOneByID(credential models.Credential) (uint64, *utils.GenericError) {
	ret := _m.Called(credential)

	var r0 uint64
	var r1 *utils.GenericError
	if rf, ok := ret.Get(0).(func(models.Credential) (uint64, *utils.GenericError)); ok {
		return rf(credential)
	}
	if rf, ok := ret.Get(0).(func(models.Credential) uint64); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(models.Credential) *utils.GenericError); ok {
		r1 = rf(credential)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GenericError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewCredentialRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCredentialRepo creates a new instance of CredentialRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCredentialRepo(t mockConstructorTestingTNewCredentialRepo) *CredentialRepo {
	mock := &CredentialRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
