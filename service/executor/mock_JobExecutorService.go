// Code generated by mockery v2.26.1. DO NOT EDIT.

package executor

import (
	models "scheduler0/models"

	mock "github.com/stretchr/testify/mock"

	raft "github.com/hashicorp/raft"

	sync "sync"
)

// MockJobExecutorService is an autogenerated mock type for the JobExecutorService type
type MockJobExecutorService struct {
	mock.Mock
}

// AddJobSchedule provides a mock function with given fields: job
func (_m *MockJobExecutorService) AddJobSchedule(job models.Job) {
	_m.Called(job)
}

// DeleteNewUncommittedExecutionLogs provides a mock function with given fields: lastInsertedId, rowsAffected
func (_m *MockJobExecutorService) DeleteNewUncommittedExecutionLogs(lastInsertedId int64, rowsAffected int64) {
	_m.Called(lastInsertedId, rowsAffected)
}

// GetExecutionsCache provides a mock function with given fields:
func (_m *MockJobExecutorService) GetExecutionsCache() *sync.Map {
	ret := _m.Called()

	var r0 *sync.Map
	if rf, ok := ret.Get(0).(func() *sync.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.Map)
		}
	}

	return r0
}

// GetScheduledJobs provides a mock function with given fields:
func (_m *MockJobExecutorService) GetScheduledJobs() *sync.Map {
	ret := _m.Called()

	var r0 *sync.Map
	if rf, ok := ret.Get(0).(func() *sync.Map); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.Map)
		}
	}

	return r0
}

// GetSingleNodeMode provides a mock function with given fields:
func (_m *MockJobExecutorService) GetSingleNodeMode() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUncommittedLogs provides a mock function with given fields:
func (_m *MockJobExecutorService) GetUncommittedLogs() []models.JobExecutionLog {
	ret := _m.Called()

	var r0 []models.JobExecutionLog
	if rf, ok := ret.Get(0).(func() []models.JobExecutionLog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JobExecutionLog)
		}
	}

	return r0
}

// ListenForJobsToInvoke provides a mock function with given fields:
func (_m *MockJobExecutorService) ListenForJobsToInvoke() {
	_m.Called()
}

// QueueExecutions provides a mock function with given fields: lastInsertedId, rowsAffected
func (_m *MockJobExecutorService) QueueExecutions(lastInsertedId int64, rowsAffected int64) {
	_m.Called(lastInsertedId, rowsAffected)
}

// ScheduleJobs provides a mock function with given fields: jobs
func (_m *MockJobExecutorService) ScheduleJobs(jobs []models.Job) {
	_m.Called(jobs)
}

// SetSingleNodeMode provides a mock function with given fields: singleNodeMode
func (_m *MockJobExecutorService) SetSingleNodeMode(singleNodeMode bool) {
	_m.Called(singleNodeMode)
}

// StopAll provides a mock function with given fields:
func (_m *MockJobExecutorService) StopAll() {
	_m.Called()
}

// UpdateRaft provides a mock function with given fields: rft
func (_m *MockJobExecutorService) UpdateRaft(rft *raft.Raft) {
	_m.Called(rft)
}

type mockConstructorTestingTNewMockJobExecutorService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockJobExecutorService creates a new instance of MockJobExecutorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockJobExecutorService(t mockConstructorTestingTNewMockJobExecutorService) *MockJobExecutorService {
	mock := &MockJobExecutorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
