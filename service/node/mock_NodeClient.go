// Code generated by mockery v2.26.1. DO NOT EDIT.

package node

import (
	context "context"
	config "scheduler0/config"

	mock "github.com/stretchr/testify/mock"

	models "scheduler0/models"
)

// MockNodeClient is an autogenerated mock type for the NodeClient type
type MockNodeClient struct {
	mock.Mock
}

// ConnectNode provides a mock function with given fields: replica
func (_m *MockNodeClient) ConnectNode(replica config.RaftNode) (*Status, error) {
	ret := _m.Called(replica)

	var r0 *Status
	var r1 error
	if rf, ok := ret.Get(0).(func(config.RaftNode) (*Status, error)); ok {
		return rf(replica)
	}
	if rf, ok := ret.Get(0).(func(config.RaftNode) *Status); ok {
		r0 = rf(replica)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Status)
		}
	}

	if rf, ok := ret.Get(1).(func(config.RaftNode) error); ok {
		r1 = rf(replica)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUncommittedLogsFromPeersPhase1 provides a mock function with given fields: ctx, node, peerFanIns
func (_m *MockNodeClient) FetchUncommittedLogsFromPeersPhase1(ctx context.Context, node *nodeService, peerFanIns []models.PeerFanIn) {
	_m.Called(ctx, node, peerFanIns)
}

// FetchUncommittedLogsFromPeersPhase2 provides a mock function with given fields: ctx, node, peerFanIns
func (_m *MockNodeClient) FetchUncommittedLogsFromPeersPhase2(ctx context.Context, node *nodeService, peerFanIns []models.PeerFanIn) {
	_m.Called(ctx, node, peerFanIns)
}

// StartJobs provides a mock function with given fields: ctx, node, peer
func (_m *MockNodeClient) StartJobs(ctx context.Context, node *nodeService, peer config.RaftNode) error {
	ret := _m.Called(ctx, node, peer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *nodeService, config.RaftNode) error); ok {
		r0 = rf(ctx, node, peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopJobs provides a mock function with given fields: ctx, node, peer
func (_m *MockNodeClient) StopJobs(ctx context.Context, node *nodeService, peer config.RaftNode) error {
	ret := _m.Called(ctx, node, peer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *nodeService, config.RaftNode) error); ok {
		r0 = rf(ctx, node, peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockNodeClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNodeClient creates a new instance of MockNodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNodeClient(t mockConstructorTestingTNewMockNodeClient) *MockNodeClient {
	mock := &MockNodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
